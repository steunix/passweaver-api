// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("PASSWEAVERAPI_PRISMA_URL")
}

// Folders
model folders {
  id          String   @id @db.VarChar(40)
  parent      String?  @db.VarChar(40)
  description String   @db.VarChar(100)
  personal    Boolean  @default(false)
  userid      String?  @db.VarChar(40)
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt

  items       items[]
  permissions folderspermissions[]
  users       users[]

  @@index([parent])
  @@index([userid])
}

model groups {
  id          String   @id @db.VarChar(40)
  description String   @db.VarChar(100)
  parent      String?  @db.VarChar(40)
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt

  users   groupsmembers[]
  folders folderspermissions[]

  @@index([parent])
}

model users {
  id              String   @id @db.VarChar(40)
  login           String   @db.VarChar(50)
  lastname        String   @db.VarChar(100)
  firstname       String?  @db.VarChar(100)
  authmethod      String   @db.VarChar(10)
  locale          String   @db.VarChar(10)
  email           String   @db.VarChar(50)
  secret          String   @db.VarChar(100)
  secretexpiresat DateTime
  personalsecret  String?  @db.VarChar(100)
  personalkey     String?  @db.VarChar(200)
  active          Boolean  @default(true)
  createdat       DateTime @default(now())
  updatedat       DateTime @updatedAt

  groups  groupsmembers[]
  folders folders[]
  settings usersettings[]

  @@unique([login])
}

model usersettings {
  id              String   @id @db.Uuid @default(uuid(7))
  userid          String   @db.VarChar(40)
  setting         String   @db.VarChar(40)
  value           String   @db.VarChar(100)

  user  users     @relation(fields: [userid], references: [id], onUpdate: Cascade, onDelete: Restrict )
}

model groupsmembers {
  id        String   @id @db.Uuid @default(uuid(7))
  userid    String   @db.VarChar(40)
  groupid   String   @db.VarChar(40)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  users  users  @relation(fields: [userid], references: [id], onUpdate: Cascade, onDelete: Restrict )
  groups groups @relation(fields: [groupid], references: [id], onUpdate: Cascade, onDelete: Restrict )

  @@index([userid])
  @@index([groupid])
}

model folderspermissions {
  id        String   @id @db.Uuid @default(uuid(7))
  folderid  String   @db.VarChar(40)
  groupid   String   @db.VarChar(40)
  read      Boolean
  write     Boolean
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  folders folders @relation(fields: [folderid], references: [id], onUpdate: Cascade, onDelete: Restrict )
  groups  groups  @relation(fields: [groupid], references: [id], onUpdate: Cascade, onDelete: Restrict )

  @@index([folderid])
  @@index([groupid])
}

model items {
  id          String    @id @db.VarChar(40)
  folderid    String    @db.VarChar(40)
  personal    Boolean   @default(false)
  type        String?   @db.Uuid
  title       String    @db.VarChar(200)
  data        String
  dataiv      String
  dataauthtag String
  algo        String?
  metadata    String?
  createdat   DateTime  @default(now())
  updatedat   DateTime  @updatedAt
  accessedat  DateTime?

  folder   folders    @relation(fields: [folderid], references: [id], onUpdate: Cascade, onDelete: Restrict )
  itemtype itemtypes? @relation(fields: [type], references: [id], onUpdate: Cascade, onDelete: Restrict )
  fts      itemsfts[]

  @@index([folderid])
}

model itemsfts {
  id          String    @id @db.VarChar(40)
  fts_vectorfull  Unsupported("tsvector")?
  fts_vectoritem  Unsupported("tsvector")?

  item   items @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Restrict )
}

model itemsdeleted {
  id          String    @id @db.VarChar(40)
  folderid    String    @db.VarChar(40)
  personal    Boolean   @default(false)
  type        String?   @db.VarChar(50)
  title       String    @db.VarChar(200)
  data        String
  dataiv      String
  dataauthtag String
  algo        String?
  metadata    String?
  createdat   DateTime
  updatedat   DateTime  @updatedAt
  deletedat   DateTime  @default(now())
  accessedat  DateTime?
}

model itemtypes {
  id          String   @id @db.Uuid @default(uuid(7))
  description String   @db.VarChar(20)
  icon        String?  @db.VarChar(50)
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt
  items       items[]
}

model onetimetokens {
  id          String   @id @db.Uuid @default(uuid(7))
  token       String   @db.VarChar(100)
  expiresat   DateTime
  data        String
  dataiv      String
  dataauthtag String
  createdat   DateTime  @default(now())
  updatedat   DateTime  @updatedAt

  @@unique([token])
}

model events {
  id        String   @id @db.Uuid @default(uuid(7))
  timestamp DateTime @default(now())
  action    Int
  entity    Int
  entityid1 String   @db.VarChar(100)
  entityid2 String?  @db.VarChar(100)
  user      String?  @db.VarChar(40)

  @@index([timestamp])
  @@index([entityid1])
  @@index([user])
}
